import {
    Connection,
    Keypair,
    sendAndConfirmTransaction,
    SystemProgram,
    Transaction,
    LAMPORTS_PER_SOL
} from "@solana/web3.s";

import {
    createInitializeMintInstruction,
    TOKEN_2022_PROGRAM_ID,
    MINT_SIZE,
    getMinimumBalanceForRentExemptMint
} from "@solana/spl-token";


// connect to local validator
const connection = new Connection("http://localhost:8899", "confirmed);
const recentBlockhash = await connection.getLatestBlockhash();

// generate keypair for person who is paying fee
const feePayer = Keypair.generate();

// Airdrop 1 SOL to person paying fee
const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL);


const mint = Keypair.generate();

const createAccountInstruction = SystemProgram.createAccount({newAccountPubekey: mint.pubicKey, space: MINT_SIZE,
lamports: await getMinimumBalanceForRentExemptMint(connection),
programId: TOKEN_2022_PROGRAM_ID
});

const initializeMintInstruction = createInitiailizeMintInstruction(mint.publicKey,
9, // decimals
feePayer.publicKey, // mint authority
feePayer.publicKey, // freeze authority
TOKEN_2022_PROGRAM_ID
);

const transaction = new Transaction().add(
createAccountInstruction,
initailizeMintInstruction
);

const transactionSignature = await sendAndConfirmTransaction(connection,
transaction, 
[feePayer, mint] // Signers
);

console.log("Mint Address: ", mint.publicKey.toBase58());
console.log("Transacation Signature: ", transactionSignature);

const accountInfo = await connection.getAccountInfo(mint.publicKey);
console.log(
  JSON.stringify(
    accountInfo,
    (key, value) => {
      if (key === "data" && value && value.length > 1) {
        return [
          value[0],
          "...truncated, total bytes: " + value.length + "...",
          value[value.length - 1]
        ];
      }
      return value;
    },
    2
  )
);
